{"pages":[{"url":"pages/about.html","text":"I am a chemist by training, interested in organic chemistry, discovery of new medicines, and computer technology. I have enjoyed chemistry since my teenage and keep enjoying it today. Throughout my career, it was the scientific curiosity that led me into areas of organic chemistry , combinatorial chemistry , medicinal chemistry , peptide synthesis , drug design , and computational chemistry . Over the years, I have been intrigued by molecular structures and physicochemical properties of molecules. After mastering the basics of computational chemistry, I kept coming back to practical approaches to molecular models and molecular visualization. At one time, when immersed in a peculiar chemical puzzle, I run across the concept of Natural Bond Orbitals (NBO) . I found it extremely useful and I am learning and using it since. I enjoy writing simple applications and scripts to make processing and understanding results of NBO explorations easier. On the hobby side, I enjoy digital photography , color science, web design, and coding. Arsenal of my scipting and programming tools includes html, css, jQuery, PHP, Java, Python, and Matlab .","tags":"pages","title":"About"},{"url":"pages/contact.html","text":"The best way to contact me is by e-mail. # My contact e-mail is: email = ( \"chem g plus a t g ma il dot com\" ) . replace ( \" \" , \"\" ) Just kidding, click the button below. I'm on Google+ and you can also find me on twitter @mpatek_ . In case that you prefer mail encryption , my PGP/GPG fingerprint is : 8F4B 90A0 9F08 832A A4F9 518B 2814 15EF E5B6 1EE6 You can also just download it here . Show/Hide email","tags":"pages","title":"Contacts"},{"url":"Natural-Dipole-Analysis.html","text":"Blogging with IPython Notebook IPython Notebook ( Jupyter notebook ) is a web-based interactive computing platform that combines live code, equations, text, images, and other media. These documents provide a complete record of computation approach that can be shared with others. Also, the IPython Notebook is not only a tool for scientific research and data analysis, but also a great tool for teaching. Technically, Notebook launches a web-based shell to an IPython session that has handy features, like the ability to save, edit, and delete lines of code. The code is organized into cells of Python, text, or Markdown. One can move the cells around, develop code interactively with documentation and notes, display objects that a browser can render (e.g., images, HTML, videos) and to share the whole notebook for a collaborative work. To demonstrate the utility and benefits of using IPython Notebook, the notebook decribed in this blog discusses Python code to analyse Natural dipole moment and its components. Steps of installing iPython notebook on Windows (as a part of Anaconda package) are described in blog \"Analyzing NBO Results with IPython Notebook\" {% notebook dipoles-blog/Dipoles_quad_all_Jupyter.ipynb cells[1:2] %} Planar geometry of formamide {% notebook dipoles-blog/Dipoles_quad_all_Jupyter.ipynb cells[7:18] %} Cleaning up the Vector Path Resulting plot is rather cluttered and thus we will need to arrange dipoles in some way to get a more interpretable view. Since most molecules have center of the coordinate system placed somewhere at the center of the molecule, sorting dipole coordinates by xy-quadrant in which the dipole origin resides is a sensible approach. The following cartoon indicates how such quadrants are defined. We will write a function that assigns each row an arbitrary quadrant depending on the signs of coordinates x and y . To further arrange directions of lines in each quadrant, we will include another function that calculates slope of the line and we will sort by the quadrant (rank) and the slope . {% notebook dipoles-blog/Dipoles_quad_all_Jupyter.ipynb cells[19:24] %} Rank Quadrants STD distance ++++++++++ Rank list is : (1, 0, 3, 2) std of distances is: 1.23 ++++++++++ Rank list is : (3, 0, 2, 1) std of distances is: 1.08 ++++++++++ Rank list is : (3, 1, 2, 0) std of distances is: 1.09 ++++++++++ Rank list is : (1, 2, 3, 0) std of distances is: 1.34 ++++++++++ Rank list is : (2, 0, 1, 3) std of distances is: 1.26 ++++++++++ Rank list is : (3, 0, 1, 2) std of distances is: 1.31 ++++++++++ Rank list is : (0, 1, 3, 2) std of distances is: 1.4 ++++++++++ Rank list is : (0, 2, 1, 3) std of distances is: 1.02 ++++++++++ Rank list is : (3, 2, 1, 0) std of distances is: 1.11 ++++++++++ Rank list is : (1, 0, 2, 3) std of distances is: 1.28 ++++++++++ Rank list is : (1, 3, 2, 0) std of distances is: 1.22 ++++++++++ Rank list is : (0, 3, 2, 1) std of distances is: 1.17 ++++++++++ Rank list is : (3, 1, 0, 2) std of distances is: 1.26 ++++++++++ Rank list is : (0, 1, 2, 3) std of distances is: 1.38 ++++++++++ Rank list is : (2, 0, 3, 1) std of distances is: 1.3 ++++++++++ Rank list is : (3, 2, 0, 1) std of distances is: 1.26 ++++++++++ Rank list is : (0, 2, 3, 1) std of distances is: 1.33 ++++++++++ Rank list is : (0, 3, 1, 2) std of distances is: 1.1 ++++++++++ Rank list is : (1, 3, 0, 2) std of distances is: 1.32 ++++++++++ Rank list is : (2, 3, 0, 1) std of distances is: 1.35 ++++++++++ Rank list is : (1, 2, 0, 3) std of distances is: 1.27 ++++++++++ Rank list is : (2, 1, 0, 3) std of distances is: 1.24 ++++++++++ Rank list is : (2, 3, 1, 0) std of distances is: 1.2 ++++++++++ Rank list is : (2, 1, 3, 0) std of distances is: 1.28 {% notebook dipoles-blog/Dipoles_quad_all_Jupyter.ipynb cells[25:29] %} An alternative and acceptable vector decomposition is shown in Figure 4 . Figure 4 Alternative vector decomposition. This concludes the analysis of NLMO dipole moment data from the NBO output file. Several vector paths composed of partial formamide dipoles were created and saved as images. Next step will be analysis of partial NLMO dipoles in terms of bonds and lone pair contributions. The complete Notebook Dipoles_quad_all_Jupyter.ipynb and accompanying files are available at the GitHub .","tags":"NBO","title":"Natural Dipole Analysis"},{"url":"python-anaconda-and-pelican-on-windows.html","text":"Introduction With so many blogs and descriptive how-to's out there 1 , 2 , 3 , 4 , 5 , one may be wondering as to why another post on Pelican static site generator. The purpose of this blog is to document building a static web site in Windows environment with Anaconda Python distribution. This tutorial assumes very little, so we will cover each step in a little more details. Chances are that you have already heard about the the Python-powered micro web frameworks, static page generators, and even about Pelican , Nikola , or Flask . If not, this blog 4 has a nice introduction. Pelican is a static web page generator that delivers web pages to the user exactly as they are stored on the server. There is no user-interaction possible once the pages are rendered. In contrast, dynamic web pages are generated and updated by a web application. Pelican is written in Python and it is platform independent. Requirements Before we can get started, we'll need to have a functioning installation of Python , and of course, Pelican . The following are the minimum requirements: Python 2.7.x or Python 3 (Python 2.7 is still preferred on Windows due to several dependencies, such as 'pycrypto', not available for Py3.6) Pelican package Text editor (e.g., Notepad++ , Markdown Pad , Sublime Text ) Web server for the web hosting Python First, we need a Python installation. I recommend Anaconda or Miniconda Python Distribution from the Continuum Analytics . Anaconda and Miniconda are free and the former comes with many pre-installed Python packages and libraries such as Pandas, NumPy, matplotlib, and others. However, the default packages do not include Pelican site generator. If you already have Python installed, skip to the section Virtual Environment . To get Anaconda/Miniconda installed under the Windows, download the latest Anaconda and install the executable. This tutorial is using Anaconda although steps with Miniconda are the same. The typical path to install Anaconda on Windows is: C:\\Anaconda . For more details on installation steps, see this YouTube video . When installation completes, append the following string (without the quotes) into your system PATH : \" C:\\Anaconda;C:\\Anaconda\\Lib;C:\\Anaconda\\DLLs;C:\\Anaconda\\Lib\\lib-tk;C:\\Anaconda\\Scripts; \" To access the PATH variable, right-click on Computer ⇒ Advanced system settings ⇒ Advance tab ⇒ Environment Variables ⇒ System variables ⇒ Path. _Note that the latest Anaconda/Miniconda installation binaries set correct path **if checked** during install_. To check that Anaconda has installed successfully, launch the Windows command shell (cmd.exe) and execute the command: conda info -- all A typical output follows: Current conda install: platform : win-32 conda version : 3.11.0-dirty conda-build version : 1.2.0 python version : 2.7.6.final.0 requests version : 2.7.0 root environment : C:\\Anaconda (writable) default environment : C:\\Anaconda envs directories : C:\\Anaconda\\envs package cache : C:\\Anaconda\\pkgs channel URLs : http://repo.continuum.io/pkgs/gpl/win-32/ http://repo.continuum.io/pkgs/gpl/noarch/ http://repo.continuum.io/pkgs/free/win-32/ http://repo.continuum.io/pkgs/free/noarch/ config file : $HOME\\.condarc is foreign system : False conda environments: - envs listed here- root * C:\\Anaconda sys.version: 2.7.6 |Anaconda 1.9.1 (32-bit)| (default... sys.prefix: C:\\Anaconda sys.executable: C:\\Anaconda\\python.exe conda location: C:\\Anaconda\\lib\\site-packages\\conda conda-build: C:\\Anaconda\\Scripts\\conda-build.bat conda-convert: C:\\Anaconda\\Scripts\\conda-convert.bat conda-env: C:\\Anaconda\\Scripts\\conda-env.exe conda-index: C:\\Anaconda\\Scripts\\conda-index.bat conda-skeleton: C:\\Anaconda\\Scripts\\conda-skeleton.bat Set up a virtual environment To avoid potential Python library/package dependency conflicts, it is a good practice to install new projects into their own development environment. Such environment includes a fresh copy of the Python binary together with a copy of the entire Python standard library. Let's create a virtual environment called pelican1 . conda create -n pelican1 python=2 The expected response is shown in Figure 1 and Figure 2 . Fig. 1. Creating virtual environment pelican1 . Fig. 2. Packages installed in the virt env pelican1 . Activate the new environment as: > activate pelican1 if everything went as expected, you should see the following text at the command prompt: [pelican1] c:\\Anaconda Pelican Finally, we proceed with the installation of Pelican package. In your terminal, execute: [pelican1] c:\\Anaconda >pip install pelican The progress will look similar to the following output. Downloading pelican-3.6.2-py2.py3-none-any.whl (129kB) Downloading Pygments-2.0.2-py2-none-any.whl (672kB) Downloading feedgenerator-1.7.tar.gz Downloading Unidecode-0.04.18.tar.gz (206kB) Downloading pytz-2015.4-py2.py3-none-any.whl (475kB) Downloading python_dateutil-2.4.2-py2.py3-none-any.whl (188kB) Downloading six-1.9.0-py2.py3-none-any.whl Downloading Jinja2-2.8-py2.py3-none-any.whl (263kB) Downloading docutils-0.12.tar.gz (1.6MB) Downloading blinker-1.4.tar.gz (111kB) Downloading MarkupSafe-0.23.tar.gz Installing collected packages: pygments, pytz, six, feedgenerator, unidecode, py thon-dateutil, markupsafe, jinja2, docutils, blinker, pelican Other Python packages Following are packages that I found useful when developing and publishing Pelican blog site. To make their installation easier, we will use the Requirements.txt file. Open a text editor and type (copy/paste) the following content. beautifulsoup4~=4.3.2 feedgenerator~=1.7 html5lib~=0.999 Markdown~=2.5.2 Pygments~=2.0.2 pyreadline~=2.0 smartypants~=1.8.6 typogrify~=2.0.7 gitpython Save the file as Requirements.txt into the folder C:\\Anaconda\\env\\pelican1\\ . Next, from the shell, issue the following command: [pelican1] c:\\Anaconda>pip install -r c:\\Anaconda\\envs\\pelican1\\requirements.txt To build, publish, and maintain the site, I use the Fabric Python library. To avoid complications with C++ compiler on Windows, use the Binstar package: [pelican1] c:\\Anaconda>conda install -c https://conda.binstar.org/binstar fabric The following packages will be installed. Note that pycrypto package may require compilation of C++ source, on Windows use MinGW or search for pycrypto binaries for your Python version. ecdsa: 0.11-py27_0 fabric: 1.10.1-py27_0 paramiko: 1.15.2-py27_0 pycrypto: 2.6.1-py27_3 At this point, the size of pelican1 environment is about 100Mb. Pelican blog So far, all packages were installed in the C:\\Anaconda\\env\\pelican1\\ folder. The actual blog files require different drive/folder location from which the site is managed. Let's create such directory, for example, C:\\demo\\pelicanblog . Now, while still in the pelican1 virtual environment, cd into this directory: [pelican1] c:\\Anaconda\\envs\\pelican1 >cd c:\\demo\\pelicanblog To initiate this new blog/web site, run the quickstart script and answer the setup questions. Note that I have chosen not to use GitHub Pages and secure SSH protocol for upload. The latter will be addressed below. [pelican1] C:\\demo\\pelicanblog> pelican-quickstart > Where do you want to create your new web site? [.] (just press enter; it will be in the /pelicalblog directory; in this case c:\\demo\\pelicanblog) > What will be the title of this web site? Blogging with Pelican > Who will be the author of this web site? your name > What will be the default language of this web site? [en] > Do you want to specify a URL prefix? e.g., http://example.com (Y/n) y > What is your URL prefix? (see above example; no trailing slash) http://www.yourdomain.com/blog > Do you want to enable article pagination? (Y/n) y > How many articles per page do you want? [10] 8 > What is your time zone? [Europe/Paris] America/Phoenix > Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) y (create fabfile.py) > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) y > Do you want to upload your website using FTP? (y/N) y > What is the hostname of your FTP server? [localhost] ftp.yourdomain.com > What is your username on that server? [anonymous] username > Where do you want to put your web site on that server? [/] /blog > Do you want to upload your website using SSH? (y/N) n > Do you want to upload your website using Dropbox? (y/N) n > Do you want to upload your website using S3? (y/N) n > Do you want to upload your website using Rackspace Cloud Files? (y/N) n > Do you want to upload your website using GitHub Pages? (y/N) n A little more explanation on the \"URL prefix\" question. Answer yes and enter URL in the next step only if you have external web hosting site. Let's take a look at the just created folder structure within the c:\\demo\\pelicanblog directory. Now if you type the tree command within your blog's main directory, you should see a directory tree similar to this one: pelicanblog/ ├── content │ └── firstblog.md ├── output │ ├── author/ │ ├── category/ │ ├── tag/ │ ├── theme/ │ ├── archives.html │ ├── authors.html │ ├── Blogging with Pelican.html │ ├── categories.html │ ├── index.html │ └── tags.html ├── fabfile.py ├── pelicanconf.py └── publishconf.py Breaking down each of these files: content/firstblog.md : A content file in Markdown syntax. This is where you start writing your blog. output/ : Content of this folder is automatically generated and later uploaded to a server. fabfile.py : Is a configuration file for Fabric , which allows you to generate your site using the fab command . pelicanconf.py : Is a Pelican configuration file containing the site settings . publishconf.py : Similar to pelicanconfig.py file, but is not intended to be used for local development. Building the site Now let's build the default look of the blog. In your terminal, type the fab command after the > character: [pelican1] C:\\demo\\pelicanblog>fab build Then [pelican1] C:\\demo\\pelicanblog>fab serve We've just launched a local webserver on the port 8000. Open your browser and navigate to http://localhost:8000 the default skeleton and template should display in your browser. Fig. 3. Final view of the site. To avoid repetitive typing in the terminal, set up a batch file, which will get you directly to the [pelican1] C:\\demo\\pelican environment and directory. Save the following script as pelican.bat and place the file into C:\\Windows\\System32 directory. @echo off REM add this batch file into C:/windows/system32 REM run upon opening cmd as >pelican.bat set SERVE=C:\\demo\\pelicanblog cd /D %SERVE% activate pelican1 Next time, upon launching the command line terminal ( cmd.exe ), just type pelican.bat and the script will execute. To change or tweak the site settings, edit files pelicanconf.py and fabfile.py created in the main pelicanblog/ directory. # pelicanconf.py from __future__ import unicode_literals AUTHOR = u 'yourname' # Change it here SITENAME = u 'Blogging with Pelican' # Change it here SITEURL = '' PATH = 'output' # This is where you write blogs, keep images, css, .. TIMEZONE = 'America/Phoenix' # Change it here DEFAULT_LANG = u 'en' # other functions (default) # fabfile.py # default variables and functions follow # ... # Added site upload function to circumvent setup of rsync on Windows env . hosts = [ 'ftp.yourdomain.com' ] env . user = \"username\" env . password = \"serverpassword\" # or just entered it when connecting from fabric.context_managers import cd def sftp (): # run from the parent directory /pelicanblog/ with lcd ( 'output' ): # cd into output directory local ( \"dir\" ) # list files and directories to be uploaded put ( '*' , './public_html/yourblogdirectory/' ) # change here Note the sftp() function added at the end of the fabfile.py . The default publish() function is based on rsync utility that is not that easy to install on Windows. Instead, we can use the SSH File Transfer Protocol (sftp) protocol, which is also secure an simple to implement. In order to use sftp protocol to safely upload your site to a web-hosting server, you will need to enable SSH/Shell access on your hosted account. Major web-hosting sites support both ftp and sftp protocols. Now, let's move on and start working on the first blog. Markdown .md file To create the content of our new web site, we will use the Markdown syntax 5 , 6 . Let's create our first markdown file name it firstblog.md . Save it into the /pelicanblog/content folder. Title: First Blog Post Date: 2015-8-08 13:10 Category: Blogging Tags: blogging, markup Slug: Blogging with Pelican Author: yourname Summary: Collection of notes related to programming and scripting. Latex: # Work in progress # Following are examples of Pelican markup. This is a **first** attempt to create static page with the help of _Pelican_. Rendering and uploading the site At this point, we will move back to the terminal and issue the following commands. [pelican1] C:\\demo\\pelicanblog>fab build [pelican1] C:\\demo\\pelicanblog>fab serve Now, in the browser type http://localhost:8000 and our modified (local) site should load. To upload it to a web-server, make sure that you create your blog directory at the remote site first. Note the path to it, e.g. /public_html/yourblogdirectory. Enter your host name and user name into the fabfile.py file. In your terminal, enter: [pelican1] C:\\demo\\pelicanblog>fab sftp Upload process should start immediately with a list of files to be uploaded and a prompt for your password. After the upload is done, head to the site and check its accessibility. And we are done This concludes the process of setting up a simple Pelican site on Windows and Python Anaconda environment. We have built the skeleton of Pelican static web-site in Python virtual environment, modified its configuration files, and uploaded the site to our hosting server. Pelicanblog files can be downloaded from here . This blog is built with Pelican as well and it is styled with customized Pelican-bootstrap3 theme. References Making a Static Blog with Pelican . ↩ Using pelican to generate static sites on windows ↩ Creating a Blog on GitHub.io with Python ↩ Creating your blog with Pelican ↩ ↩ Markdown Cheatsheet ↩ ↩ from Darin Fireball ↩","tags":"Blogging","title":"Blogging with Python, Anaconda, and Pelican on Windows"}]}